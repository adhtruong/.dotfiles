#!/usr/bin/env bash

# Advanced Window Focus Script
# Uses AltTab's detailed JSON output to focus left/right windows relative to current window
# Usage: ./focus-window.sh [left|right|debug]

set -euo pipefail

ALTTAB_PATH="/Applications/AltTab.app/Contents/MacOS/AltTab"

# Check if AltTab is installed
if [[ ! -x "$ALTTAB_PATH" ]]; then
    echo "Error: AltTab not found at $ALTTAB_PATH" >&2
    exit 1
fi

# Get window data from AltTab
get_window_data() {
    if ! "$ALTTAB_PATH" --detailed-list 2>/dev/null; then
        echo "Error: Failed to get window data from AltTab" >&2
        return 1
    fi
}

# Get current focused window ID
get_current_window_id() {
    local json_data="$1"

    # Get current active window info using AppleScript
    local current_app_name
    current_app_name=$(osascript -e 'tell application "System Events" to get name of first application process whose frontmost is true' 2>/dev/null)

    if [[ -z "$current_app_name" ]]; then
        echo "Error: Could not determine current application" >&2
        return 1
    fi

    # Find matching window in AltTab data - try multiple strategies
    local window_id

    if [[ -z "$window_id" ]]; then
        window_id=$(echo "$json_data" | jq -r "
            .windows[] |
            select(.isMinimized == false and .isHidden == false and (.spaceIndexes | length > 0)) |
            [.lastFocusOrder, .id] |
            @tsv
        " | sort -n | head -1 | cut -f2)
    fi

    echo "$window_id"
}

# Get current window position and size
get_current_window_info() {
    local json_data="$1"
    local current_id="$2"
    echo "$json_data" | jq -r "
        .windows[] |
        select(.id == $current_id) |
        [.position[0], .size[0], .lastFocusOrder, .id, .title, .appName] |
        @tsv
    " | head -1
}

# Find leftmost window relative to current window
find_left_window() {
    local json_data="$1"
    local current_x="$2"
    local current_width="$3"
    echo "$json_data" | jq -r "
        [.windows[] |
        select(.isMinimized == false and .isHidden == false and (.spaceIndexes | length > 0)) |
        select(.position[0] < $current_x)] |
        sort_by(.lastFocusOrder) |
        .[0] |
        [.lastFocusOrder, .position[0], .size[0], .id, .title, .appName] |
        @tsv
    "
}

# Find rightmost window relative to current window
find_right_window() {
    local json_data="$1"
    local current_x="$2"
    local current_width="$3"
    local current_right_edge=$((current_x + current_width - 1))
    echo "$json_data" | jq -r "
        [.windows[] |
        select(.isMinimized == false and .isHidden == false and (.spaceIndexes | length > 0)) |
        select(.position[0] >= $current_right_edge)] |
        sort_by(.lastFocusOrder) |
        .[0] |
        [.lastFocusOrder, .position[0], .size[0], .id, .title, .appName] |
        @tsv
    "
}

# Focus window by ID
focus_window() {
    local window_id="$1"
    if "$ALTTAB_PATH" --focus="$window_id" 2>/dev/null; then
        return 0
    else
        echo "Error: Failed to focus window $window_id" >&2
        return 1
    fi
}

# Main function to focus left or right window relative to current
focus_direction() {
    local direction="$1"
    local window_data
    local current_window_id
    local current_window_info
    local target_window

    if ! window_data=$(get_window_data); then
        echo "Error: Could not retrieve window data" >&2
        return 1
    fi

    # Get current focused window
    current_window_id=$(get_current_window_id "$window_data")
    echo "Current window ID: $current_window_id"
    if [[ -z "$current_window_id" ]]; then
        echo "Error: Could not determine current focused window" >&2
        return 1
    fi

    # Get current window position
    current_window_info=$(get_current_window_info "$window_data" "$current_window_id")
    if [[ -z "$current_window_info" ]]; then
        echo "Error: Could not get current window position" >&2
        return 1
    fi

    # Parse current window info
    IFS=$'\t' read -r current_x current_width _ current_id current_title current_app <<<"$current_window_info"

    echo "Current window: $current_title ($current_app) at x=$current_x, width=$current_width"

    if [[ "$direction" == "left" ]]; then
        target_window=$(find_left_window "$window_data" "$current_x" "$current_width")
    elif [[ "$direction" == "right" ]]; then
        target_window=$(find_right_window "$window_data" "$current_x" "$current_width")
    else
        echo "Error: Invalid direction. Use 'left' or 'right'" >&2
        return 1
    fi

    if [[ -z "$target_window" ]]; then
        echo "No window found to the $direction of current window" >&2
        return 1
    fi

    # Parse the target window data
    IFS=$'\t' read -r pos width focus_order window_id title app_name <<<"$target_window"

    # Check if we got a valid window ID
    if [[ -z "$window_id" ]]; then
        echo "No window found to the $direction of current window" >&2
        return 1
    fi

    echo "Focusing ${direction} window: $title ($app_name) at x=$pos"
    echo "Window ID: $window_id, Focus order: $focus_order (lower = more recent)"

    focus_window "$window_id"
}

# Debug function to show all windows with current window highlighted
debug_windows() {
    local window_data
    local current_window_id

    if ! window_data=$(get_window_data); then
        echo "Error: Could not retrieve window data" >&2
        return 1
    fi

    current_window_id=$(get_current_window_id "$window_data")

    echo "=== Visible Windows ==="
    echo "$window_data" | jq -r '
        .windows[] |
        select(.isMinimized == false and .isHidden == false and (.spaceIndexes | length > 0)) |
        [.position[0], .title, .appName, .position[1], .size[0], .size[1], .lastFocusOrder, .id] |
        @tsv
    ' | sort -n | while IFS=$'\t' read -r x_pos title app_name y_pos width height focus_order window_id; do
        local right_edge=$((x_pos + width))
        local marker=""
        if [[ "$window_id" == "$current_window_id" ]]; then
            marker=" ← CURRENT"
        fi
        echo "• $title ($app_name)$marker"
        echo "  Position: [$x_pos, $y_pos], Size: [$width, $height]"
        echo "  Left edge: $x_pos, Right edge: $right_edge (width: $width)"
        echo "  Focus order: $focus_order (lower = more recent), ID: $window_id"
        echo ""
    done
}

# Main execution
main() {
    local direction="${1:-}"

    # Check if jq is available
    if ! command -v jq >/dev/null 2>&1; then
        echo "Error: jq is required but not installed. Install with: brew install jq" >&2
        exit 1
    fi

    case "$direction" in
    "debug")
        debug_windows
        ;;
    "left" | "right")
        focus_direction "$direction"
        ;;
    "")
        echo "Usage: $0 [left|right|debug]" >&2
        exit 1
        ;;
    *)
        echo "Error: Invalid argument '$direction'. Use 'left', 'right', 'name', or 'debug'" >&2
        exit 1
        ;;
    esac
}

main "$@"
